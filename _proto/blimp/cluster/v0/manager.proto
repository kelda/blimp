syntax = "proto3";

package blimp.cluster.v0;

import "blimp/errors/v0/errors.proto";

option go_package = "github.com/kelda/blimp/pkg/proto/cluster";

service Manager {
  rpc AttachToSandbox(AttachToSandboxRequest) returns (AttachToSandboxResponse) {}
  rpc BlimpUpPreview(BlimpUpPreviewRequest) returns (BlimpUpPreviewResponse) {}
  rpc CreateSandbox(CreateSandboxRequest) returns (CreateSandboxResponse) {}
  rpc DeployToSandbox(DeployRequest) returns (DeployResponse) {}
  rpc DeleteSandbox(DeleteSandboxRequest) returns (DeleteSandboxResponse) {}
  rpc GetBuildkit(GetBuildkitRequest) returns (GetBuildkitResponse) {}
  rpc GetStatus(GetStatusRequest) returns (GetStatusResponse) {}
  rpc GetImageNamespace(GetImageNamespaceRequest) returns (GetImageNamespaceResponse) {}
  rpc ProxyAnalytics(ProxyAnalyticsRequest) returns (ProxyAnalyticsResponse) {}
  rpc WatchStatus(GetStatusRequest) returns (stream GetStatusResponse) {}
  rpc CheckVersion(CheckVersionRequest) returns (CheckVersionResponse) {}
  rpc Restart(RestartRequest) returns (RestartResponse) {}
  rpc TagImages(TagImagesRequest) returns (stream TagImagesResponse) {}
  rpc Expose(ExposeRequest) returns (ExposeResponse) {}
  rpc Unexpose(UnexposeRequest) returns (UnexposeResponse) {}
}

message ProxyAnalyticsRequest {
  // The JSON payload to post to DataDog on behalf of the client.
  string body = 1;
}

message ProxyAnalyticsResponse {
  blimp.errors.v0.Error error = 1;
}

enum CLIAction {
  OK = 0;
  EXIT = 1;
}

message CheckVersionRequest {
  string version = 1;
}

message CheckVersionResponse {
  string version = 1;
  string display_message = 2;
  CLIAction action = 3;
  blimp.errors.v0.Error error = 4;
}

message CreateSandboxRequest {
  string token = 1;
  string composeFile = 2;
  map<string, RegistryCredential> registryCredentials = 3;
  map<string, string> syncedFolders = 4;
}

message RegistryCredential {
  string username = 1;
  string password = 2;
}

message AttachToSandboxRequest {
  string token = 1;
}

message AttachToSandboxResponse {
  blimp.errors.v0.Error error = 1;
  string NodeAddress = 2;
  string NodeCert = 3;
  KubeCredentials kubeCredentials = 4;
}

message CreateSandboxResponse {
  blimp.errors.v0.Error error = 1;
  string NodeAddress = 2;
  string NodeCert = 3;
  KubeCredentials kubeCredentials = 4;
  string ImageNamespace = 5;

  string message = 6;
  CLIAction action = 7;
}

message DeployRequest {
  string token = 1;
  string composeFile = 2;
  map<string, string> builtImages = 3;
}

message DeployResponse {
  blimp.errors.v0.Error error = 1;
}

message KubeCredentials {
  string host = 1;
  string caCrt = 2;
  string token = 3;
  string namespace = 4;
}

message DeleteSandboxRequest {
  string token = 1;
  bool delete_volumes = 2;
}

message DeleteSandboxResponse {
  blimp.errors.v0.Error error = 1;
}

message GetStatusRequest {
  string token = 1;
}

message GetStatusResponse {
  blimp.errors.v0.Error error = 1;
  SandboxStatus status = 2;
}

message SandboxStatus {
  map<string, ServiceStatus> services = 1;
  SandboxPhase phase = 2;

  enum SandboxPhase {
    UNKNOWN = 0;
    RUNNING = 1;
    TERMINATING = 2;
    DOES_NOT_EXIST = 3;
    PREPARING = 4;
  }
}

enum ServicePhase {
  UNKNOWN = 0;
  INITIALIZING_VOLUMES = 1;
  WAIT_DEPENDS_ON = 2;
  WAIT_SYNC_BIND = 3;
  PENDING = 4;
  RUNNING = 5;
  EXITED = 6;
  UNHEALTHY = 7;
  UNSCHEDULABLE = 8;
}

message ServiceStatus {
  ServicePhase phase = 1;
  string msg = 2;
  bool has_started = 3;
}

message RestartRequest {
  string token = 1;
  string service = 2;
}

message RestartResponse {
  blimp.errors.v0.Error error = 1;
}

message TagImageRequest {
  string service = 1;
  string image = 2;
  string tag = 3;
}

message TagImagesRequest {
  string token = 1;
  repeated TagImageRequest tagRequests = 2;
  map<string, RegistryCredential> registryCredentials = 3;
}

message TagImagesResponse {
  string service = 1;
  blimp.errors.v0.Error error = 2;
}

message ExposeRequest {
  string token = 1;
  string service = 2;
  uint32 port = 3;
}

message ExposeResponse {
  blimp.errors.v0.Error error = 1;
  string link = 2;
}

message UnexposeRequest {
  string token = 1;
}

message UnexposeResponse {
  blimp.errors.v0.Error error = 1;
}

message GetImageNamespaceRequest {
  string token = 1;
}

message GetImageNamespaceResponse {
  blimp.errors.v0.Error error = 1;
  string namespace = 2;
}

message GetBuildkitRequest {
  string token = 1;
}

message GetBuildkitResponse {
  blimp.errors.v0.Error error = 1;
  string NodeAddress = 2;
  string NodeCert = 3;
}

message BlimpUpPreviewRequest {
  string token = 1;
  string repo = 2;
}

message BlimpUpPreviewResponse {
  blimp.errors.v0.Error error = 1;
}
