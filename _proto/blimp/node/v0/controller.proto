syntax = "proto3";

package blimp.node.v0;

import "blimp/errors/v0/errors.proto";

option go_package = "github.com/kelda/blimp/pkg/proto/node";

service Controller {
  rpc Tunnel(stream TunnelMsg) returns (stream TunnelMsg) {}
  rpc ExposedTunnel(stream TunnelMsg) returns (stream TunnelMsg) {}

  // The request and responses are flipped because the node controller is
  // querying the CLI for status updates, but the CLI is initiating the
  // connection.
  rpc SyncNotifications(stream SyncStatusResponse) returns (stream GetSyncStatusRequest) {}
}

// In a Tunnel, name, port, and token are used. In an ExposedTunnel, token and
// namespace are used.
message TunnelHeader{
    string name = 1;
    uint32 port = 2;
    // For Tunnel, token is a normal OAuth ID Token. For ExposedTunnel, it is
    // the secret key indexing the service/port combination to be exposed.
    string token = 3;
    string namespace = 4;
}

message EOF {}

// The first message the Client sends to the server must be a header.  After
// that all messages either direction must be bufs.  Optionally, either
// direction may send an EOF to indicate they have no more to send.
message TunnelMsg {
  oneof msg {
    blimp.errors.v0.Error error = 1;
    TunnelHeader header = 2;
    bytes buf = 3;
    EOF eof = 4;
  }
}

message SyncStatusResponse {
  oneof msg {
    // Only used in handshake.
    string token = 1;
    bool synced = 2;
  }
}

message GetSyncStatusRequest {}
